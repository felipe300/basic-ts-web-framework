{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAE,EAAA,IAAI,EAAE,KAAR;AAAe,EAAA,GAAG,EAAE;AAApB,CAAT,CAAb;AAEA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,YAAA;AACd,EAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACH,CAFD;AAGA,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,YAAA;AACb,EAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACH,CAFD;AAGA,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,YAAA;AACb,EAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACH,CAFD;AAIA,IAAI,CAAC,OAAL,CAAa,OAAb;;ADVA,IAAA,IAAA,GAAA,YAAA;AAGE,WAAA,IAAA,CAAoB,IAApB,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;;AAAoB,SAAA,IAAA,GAAA,IAAA;AAFpB,SAAA,MAAA,GAAwC,EAAxC;;AAIA,SAAA,GAAA,GAAM,UAAC,QAAD,EAAiB;AACrB,aAAO,KAAI,CAAC,IAAL,CAAU,QAAV,CAAP;AACD,KAFD;;AAIA,SAAA,GAAA,GAAM,UAAC,MAAD,EAAkB;AACtB,MAAA,KAAI,CAAC,IAAL,GAAS,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,KAAI,CAAC,IAAb,CAAA,EAAsB,MAAtB,CAAT;AACD,KAFD;;AAIA,SAAA,EAAA,GAAK,UAAC,SAAD,EAAmB,QAAnB,EAAqC;AACxC,UAAM,QAAQ,GAAG,KAAI,CAAC,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,MAAA,KAAI,CAAC,MAAL,CAAY,SAAZ,IAAyB,QAAzB;AACD,KAJD;;AAMA,SAAA,OAAA,GAAU,UAAC,SAAD,EAAiB;AACzB,UAAM,QAAQ,GAAG,KAAI,CAAC,MAAL,CAAY,SAAZ,CAAjB;AAEA,UAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;AAExC,MAAA,QAAQ,CAAC,OAAT,CAAiB,UAAC,QAAD,EAAS;AAAK,eAAA,QAAQ,EAAR;AAAU,OAAzC;AACD,KAND;AAhBuC;;AAuBzC,SAAA,IAAA;AA1BA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import { Event } from '../types/Event'\nimport { Callback } from '../types/Callback'\nimport { UserProps } from '../interfaces/UserProps'\n\nexport class User {\n  events: { [key: string]: Callback[] } = {}\n\n  constructor(private data: UserProps) {}\n\n  get = (propName: string): string | number => {\n    return this.data[propName]\n  }\n\n  set = (update: UserProps): void => {\n    this.data = { ...this.data, ...update }\n  }\n\n  on = (eventName: Event, callback: Callback): void => {\n    const handlers = this.events[eventName] || []\n    handlers.push(callback)\n    this.events[eventName] = handlers\n  }\n\n  trigger = (eventName: Event): void => {\n    const handlers = this.events[eventName]\n\n    if (!handlers || handlers.length === 0) return\n\n    handlers.forEach((callback) => callback())\n  }\n}\n","import { User } from './models/User'\n\nconst user = new User({ name: 'bob', age: 20 })\n\nuser.on('change', () => {\n    console.log('change 1')\n})\nuser.on('wheel', () => {\n    console.log('wheel 2')\n})\nuser.on('click', () => {\n    console.log('click 1')\n})\n\nuser.trigger('click')"]}